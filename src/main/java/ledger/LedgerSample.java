package ledger;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class LedgerSample extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "",
        "90fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fe4c656467657253616d706c653a20697373756520746f20746865207a65726f20616464726573734c656467657253616d706c653a20617070726f766520746f20746865207a65726f20616464726573734c656467657253616d706c653a2073656e6420746f20746865207a65726f2061646472657373746f20616e642076616c756573206172726179206c656e676874206d757374206d617463682e4c656467657253616d706c653a20617070726f76652066726f6d20746865207a65726f206164647265737364657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d7a65726f2e497373756572526f6c653a2063616c6c657220646f6573206e6f742068617665207468652049737375657220726f6c6553757370656e646572526f6c653a2063616c6c657220646f6573206e6f742068617665207468652053757370656e64657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f20616464726573734c656467657253616d706c653a2064657374726f792066726f6d20746865207a65726f2061646472657373a165627a7a72305820ac5e0c336460fb5bcfd6a005532b3cba46fdf78baf4d739c61547a5c1996867100294c656467657253616d706c653a20697373756520746f20746865207a65726f2061646472657373526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373"
    };

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSuspender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"destroyFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSuspender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"suspended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSuspender\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shortName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unSuspend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suspend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"shortName\",\"type\":\"string\"},{\"name\":\"minUnit\",\"type\":\"uint8\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Suspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SuspenderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SuspenderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerRemoved\",\"type\":\"event\"}]"
    };

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_DESTROY = "destroy";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_TOTALAMOUNT = "totalAmount";

    public static final String FUNC_ADDISSUER = "addIssuer";

    public static final String FUNC_BATCHSEND = "batchSend";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_RENOUNCESUSPENDER = "renounceSuspender";

    public static final String FUNC_DESTROYFROM = "destroyFrom";

    public static final String FUNC_ADDSUSPENDER = "addSuspender";

    public static final String FUNC_SUSPENDED = "suspended";

    public static final String FUNC_DESCRIPTION = "description";

    public static final String FUNC_ISISSUER = "isIssuer";

    public static final String FUNC_ISSUSPENDER = "isSuspender";

    public static final String FUNC_RENOUNCEISSUER = "renounceIssuer";

    public static final String FUNC_SEND = "send";

    public static final String FUNC_MINUNIT = "minUnit";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_ISSUE = "issue";

    public static final String FUNC_SHORTNAME = "shortName";

    public static final String FUNC_SENDFROM = "sendFrom";

    public static final String FUNC_UNSUSPEND = "unSuspend";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_BALANCE = "balance";

    public static final String FUNC_SUSPEND = "suspend";

    public static final Event SEND_EVENT =
            new Event(
                    "Send",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>() {},
                            new TypeReference<DynamicBytes>() {}));;

    public static final Event APPROVAL_EVENT =
            new Event(
                    "Approval",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>() {}));;

    public static final Event SUSPENDED_EVENT =
            new Event(
                    "Suspended", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));;

    public static final Event UNSUSPENDED_EVENT =
            new Event(
                    "UnSuspended",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));;

    public static final Event SUSPENDERADDED_EVENT =
            new Event(
                    "SuspenderAdded",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    public static final Event SUSPENDERREMOVED_EVENT =
            new Event(
                    "SuspenderRemoved",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    public static final Event ISSUERADDED_EVENT =
            new Event(
                    "IssuerAdded",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    public static final Event ISSUERREMOVED_EVENT =
            new Event(
                    "IssuerRemoved",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    @Deprecated
    protected LedgerSample(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LedgerSample(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LedgerSample(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LedgerSample(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> destroy(BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_DESTROY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void destroy(BigInteger value, byte[] data, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DESTROY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String destroySeq(BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_DESTROY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getDestroyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DESTROY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<BigInteger, byte[]>(
                (BigInteger) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public RemoteCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void approve(String spender, BigInteger value, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String approveSeq(String spender, BigInteger value) {
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getApproveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public Tuple1<Boolean> getApproveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<BigInteger> totalAmount() {
        final Function function =
                new Function(
                        FUNC_TOTALAMOUNT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addIssuer(String account) {
        final Function function =
                new Function(
                        FUNC_ADDISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addIssuer(String account, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addIssuerSeq(String account) {
        final Function function =
                new Function(
                        FUNC_ADDISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getAddIssuerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDISSUER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> batchSend(
            List<String> to, List<BigInteger> values, byte[] data) {
        final Function function =
                new Function(
                        FUNC_BATCHSEND,
                        Arrays.<Type>asList(
                                to.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "address[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Address>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        to,
                                                        org.fisco.bcos.web3j.abi.datatypes.Address
                                                                .class)),
                                values.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "uint256[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.generated
                                                        .Uint256>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        values,
                                                        org.fisco.bcos.web3j.abi.datatypes.generated
                                                                .Uint256.class)),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void batchSend(
            List<String> to,
            List<BigInteger> values,
            byte[] data,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_BATCHSEND,
                        Arrays.<Type>asList(
                                to.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "address[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Address>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        to,
                                                        org.fisco.bcos.web3j.abi.datatypes.Address
                                                                .class)),
                                values.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "uint256[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.generated
                                                        .Uint256>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        values,
                                                        org.fisco.bcos.web3j.abi.datatypes.generated
                                                                .Uint256.class)),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String batchSendSeq(List<String> to, List<BigInteger> values, byte[] data) {
        final Function function =
                new Function(
                        FUNC_BATCHSEND,
                        Arrays.<Type>asList(
                                to.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "address[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Address>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        to,
                                                        org.fisco.bcos.web3j.abi.datatypes.Address
                                                                .class)),
                                values.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "uint256[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.generated
                                                        .Uint256>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        values,
                                                        org.fisco.bcos.web3j.abi.datatypes.generated
                                                                .Uint256.class)),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<List<String>, List<BigInteger>, byte[]> getBatchSendInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_BATCHSEND,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Address>>() {},
                                new TypeReference<DynamicArray<Uint256>>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<List<String>, List<BigInteger>, byte[]>(
                convertToNative((List<Address>) results.get(0).getValue()),
                convertToNative((List<Uint256>) results.get(1).getValue()),
                (byte[]) results.get(2).getValue());
    }

    public RemoteCall<TransactionReceipt> increaseAllowance(String spender, BigInteger addedValue) {
        final Function function =
                new Function(
                        FUNC_INCREASEALLOWANCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        addedValue)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void increaseAllowance(
            String spender, BigInteger addedValue, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INCREASEALLOWANCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        addedValue)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String increaseAllowanceSeq(String spender, BigInteger addedValue) {
        final Function function =
                new Function(
                        FUNC_INCREASEALLOWANCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        addedValue)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getIncreaseAllowanceInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_INCREASEALLOWANCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public Tuple1<Boolean> getIncreaseAllowanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_INCREASEALLOWANCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> renounceSuspender() {
        final Function function =
                new Function(
                        FUNC_RENOUNCESUSPENDER,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void renounceSuspender(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_RENOUNCESUSPENDER,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String renounceSuspenderSeq() {
        final Function function =
                new Function(
                        FUNC_RENOUNCESUSPENDER,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> destroyFrom(String from, BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_DESTROYFROM,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(from),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void destroyFrom(
            String from, BigInteger value, byte[] data, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DESTROYFROM,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(from),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String destroyFromSeq(String from, BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_DESTROYFROM,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(from),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, BigInteger, byte[]> getDestroyFromInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DESTROYFROM,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<String, BigInteger, byte[]>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (byte[]) results.get(2).getValue());
    }

    public RemoteCall<TransactionReceipt> addSuspender(String account) {
        final Function function =
                new Function(
                        FUNC_ADDSUSPENDER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addSuspender(String account, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDSUSPENDER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addSuspenderSeq(String account) {
        final Function function =
                new Function(
                        FUNC_ADDSUSPENDER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getAddSuspenderInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDSUSPENDER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<Boolean> suspended() {
        final Function function =
                new Function(
                        FUNC_SUSPENDED,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> description() {
        final Function function =
                new Function(
                        FUNC_DESCRIPTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isIssuer(String account) {
        final Function function =
                new Function(
                        FUNC_ISISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(account)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> isSuspender(String account) {
        final Function function =
                new Function(
                        FUNC_ISSUSPENDER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(account)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> renounceIssuer() {
        final Function function =
                new Function(
                        FUNC_RENOUNCEISSUER,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void renounceIssuer(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEISSUER,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String renounceIssuerSeq() {
        final Function function =
                new Function(
                        FUNC_RENOUNCEISSUER,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> send(String to, BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_SEND,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(to),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void send(String to, BigInteger value, byte[] data, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SEND,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(to),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendSeq(String to, BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_SEND,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(to),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, BigInteger, byte[]> getSendInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SEND,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<String, BigInteger, byte[]>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (byte[]) results.get(2).getValue());
    }

    public RemoteCall<BigInteger> minUnit() {
        final Function function =
                new Function(
                        FUNC_MINUNIT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> decreaseAllowance(
            String spender, BigInteger subtractedValue) {
        final Function function =
                new Function(
                        FUNC_DECREASEALLOWANCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        subtractedValue)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void decreaseAllowance(
            String spender, BigInteger subtractedValue, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DECREASEALLOWANCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        subtractedValue)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String decreaseAllowanceSeq(String spender, BigInteger subtractedValue) {
        final Function function =
                new Function(
                        FUNC_DECREASEALLOWANCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        subtractedValue)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getDecreaseAllowanceInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DECREASEALLOWANCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public Tuple1<Boolean> getDecreaseAllowanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DECREASEALLOWANCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> issue(String to, BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_ISSUE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(to),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void issue(String to, BigInteger value, byte[] data, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ISSUE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(to),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String issueSeq(String to, BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_ISSUE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(to),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, BigInteger, byte[]> getIssueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ISSUE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<String, BigInteger, byte[]>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (byte[]) results.get(2).getValue());
    }

    public Tuple1<Boolean> getIssueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ISSUE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<String> shortName() {
        final Function function =
                new Function(
                        FUNC_SHORTNAME,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> sendFrom(
            String from, String to, BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_SENDFROM,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(from),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(to),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendFrom(
            String from,
            String to,
            BigInteger value,
            byte[] data,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDFROM,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(from),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(to),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendFromSeq(String from, String to, BigInteger value, byte[] data) {
        final Function function =
                new Function(
                        FUNC_SENDFROM,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(from),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(to),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value),
                                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, BigInteger, byte[]> getSendFromInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDFROM,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<String, String, BigInteger, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public RemoteCall<TransactionReceipt> unSuspend() {
        final Function function =
                new Function(
                        FUNC_UNSUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unSuspend(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_UNSUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unSuspendSeq() {
        final Function function =
                new Function(
                        FUNC_UNSUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> allowance(String owner, String spender) {
        final Function function =
                new Function(
                        FUNC_ALLOWANCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(owner),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(spender)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balance(String owner) {
        final Function function =
                new Function(
                        FUNC_BALANCE,
                        Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(owner)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> suspend() {
        final Function function =
                new Function(
                        FUNC_SUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void suspend(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String suspendSeq() {
        final Function function =
                new Function(
                        FUNC_SUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public List<SendEventResponse> getSendEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(SEND_EVENT, transactionReceipt);
        ArrayList<SendEventResponse> responses = new ArrayList<SendEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SendEventResponse typedResponse = new SendEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSendEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SEND_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerSendEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SEND_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses =
                new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerApprovalEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPROVAL_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerApprovalEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPROVAL_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<SuspendedEventResponse> getSuspendedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(SUSPENDED_EVENT, transactionReceipt);
        ArrayList<SuspendedEventResponse> responses =
                new ArrayList<SuspendedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuspendedEventResponse typedResponse = new SuspendedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSuspendedEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerSuspendedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<UnSuspendedEventResponse> getUnSuspendedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(UNSUSPENDED_EVENT, transactionReceipt);
        ArrayList<UnSuspendedEventResponse> responses =
                new ArrayList<UnSuspendedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnSuspendedEventResponse typedResponse = new UnSuspendedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerUnSuspendedEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UNSUSPENDED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerUnSuspendedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UNSUSPENDED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<SuspenderAddedEventResponse> getSuspenderAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(SUSPENDERADDED_EVENT, transactionReceipt);
        ArrayList<SuspenderAddedEventResponse> responses =
                new ArrayList<SuspenderAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuspenderAddedEventResponse typedResponse = new SuspenderAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSuspenderAddedEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDERADDED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerSuspenderAddedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDERADDED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<SuspenderRemovedEventResponse> getSuspenderRemovedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(SUSPENDERREMOVED_EVENT, transactionReceipt);
        ArrayList<SuspenderRemovedEventResponse> responses =
                new ArrayList<SuspenderRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuspenderRemovedEventResponse typedResponse = new SuspenderRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSuspenderRemovedEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDERREMOVED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerSuspenderRemovedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDERREMOVED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<IssuerAddedEventResponse> getIssuerAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ISSUERADDED_EVENT, transactionReceipt);
        ArrayList<IssuerAddedEventResponse> responses =
                new ArrayList<IssuerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssuerAddedEventResponse typedResponse = new IssuerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerIssuerAddedEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUERADDED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerIssuerAddedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUERADDED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<IssuerRemovedEventResponse> getIssuerRemovedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ISSUERREMOVED_EVENT, transactionReceipt);
        ArrayList<IssuerRemovedEventResponse> responses =
                new ArrayList<IssuerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssuerRemovedEventResponse typedResponse = new IssuerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerIssuerRemovedEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUERREMOVED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerIssuerRemovedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUERREMOVED_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    @Deprecated
    public static LedgerSample load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new LedgerSample(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LedgerSample load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new LedgerSample(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LedgerSample load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new LedgerSample(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LedgerSample load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new LedgerSample(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LedgerSample> deploy(
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider,
            String description,
            String shortName,
            BigInteger minUnit,
            BigInteger totalAmount) {
        String encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(shortName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(minUnit),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        totalAmount)));
        return deployRemoteCall(
                LedgerSample.class,
                web3j,
                credentials,
                contractGasProvider,
                BINARY,
                encodedConstructor);
    }

    public static RemoteCall<LedgerSample> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider,
            String description,
            String shortName,
            BigInteger minUnit,
            BigInteger totalAmount) {
        String encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(shortName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(minUnit),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        totalAmount)));
        return deployRemoteCall(
                LedgerSample.class,
                web3j,
                transactionManager,
                contractGasProvider,
                BINARY,
                encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LedgerSample> deploy(
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit,
            String description,
            String shortName,
            BigInteger minUnit,
            BigInteger totalAmount) {
        String encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(shortName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(minUnit),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        totalAmount)));
        return deployRemoteCall(
                LedgerSample.class,
                web3j,
                credentials,
                gasPrice,
                gasLimit,
                BINARY,
                encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LedgerSample> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit,
            String description,
            String shortName,
            BigInteger minUnit,
            BigInteger totalAmount) {
        String encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(shortName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(minUnit),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        totalAmount)));
        return deployRemoteCall(
                LedgerSample.class,
                web3j,
                transactionManager,
                gasPrice,
                gasLimit,
                BINARY,
                encodedConstructor);
    }

    public static class SendEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger value;

        public byte[] data;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class SuspendedEventResponse {
        public Log log;

        public String account;
    }

    public static class UnSuspendedEventResponse {
        public Log log;

        public String account;
    }

    public static class SuspenderAddedEventResponse {
        public Log log;

        public String account;
    }

    public static class SuspenderRemovedEventResponse {
        public Log log;

        public String account;
    }

    public static class IssuerAddedEventResponse {
        public Log log;

        public String account;
    }

    public static class IssuerRemovedEventResponse {
        public Log log;

        public String account;
    }
}
